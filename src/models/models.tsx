import { CElement } from 'react';

export type taskStatus = 'to_do' | 'in_progress' | 'done';
export type taskType = 'Epic' | 'Story' | 'Task' | 'Improvement' | 'Bug';
export type priorityType = 'Highest' | 'High' | 'Medium' | 'Low' | 'Lowest';

export interface Column {
    key: taskStatus,
    title: string,
    sequence: number,
    task_number: number
}

export interface Project {
    project_key: string; // usually the first letters of words which are used in name
    lead: string;
    name: string;
    key?: string; // generated by db
}

export interface LinkType {
    to: string;
    title: string;
}

export interface Task {
    key: string; // generated by db
    project_key: string; // Project => key generated by db
    project_key_title: string;
    reporter: string; // the key of the user who reported task
    description: any;
    status: taskStatus;
    type: taskType;
    summary: string;
    sequence: number; // sequence of creation, it doesn't change if smth was removed
    task_number: number;
    priority: priorityType;
    assignee?: string; // the key of the user who assigned to do this task
}

export interface User {
    key: string;
    email: string;
    full_name: string;
    project_keys?: {
        [key: string]: boolean
    };
    avatar?: string
}

export interface SignUpUser extends User {
    password: string;
    confirmPassword: string;
}

export interface LogInUser {
    email: string;
    password: string;
}

// Props
export type CreateProps = {
    isOpen: boolean,
    onClose: Function,
    projectKey: string,
    currentUser?: User,
    classes?: any;
}

export type MatchProps = {
    match: any;
};

export type WithRouterProps = {
    match: any,
    location: any,
    history: any
}

export type SearchInSelectProps = {
    id: string,
    label: string,
    data: any[],
    defaultValue: any;
    boxStyles: string,
    getOptionLabel: Function,
    renderOptionFragment: Function,
    onChange: Function,
    inputStyles?: string,
    startAdornmentFragment?: CElement<any, any>,
}

export type ProjectColumnProps = {
    column: Column,
    tasks: Task[],
    onTasksListChange: Function,
    key: string,
    classes: any,
    moveColumn: (key: string, afterKey: string) => void,
    connectDragSource: any,
    connectDragPreview: any,
    connectDropTarget: any,
    isDragging: boolean
}

export type TaskCardProps = {
    task: Task,
    key: string,
    classes: any,
    moveTask: (key: string, afterKey: string) => void,
    connectDragSource: any,
    connectDragPreview: any,
    connectDropTarget: any,
    isDragging: boolean
}

export type TasksMap = {[key: string]: Task[]}
